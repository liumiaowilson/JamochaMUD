/*
 * AddEdit.java
 *
 * Created on May 7, 2005, 4:44 PM
 */

/* JamochaMUD, a Muck/Mud client program
 * Copyright (C) 1998-2005  Jeff Robinson
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * version 2, as published by the Free Software Foundation
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
*/

package anecho.JamochaMUD.legacy;

/**
 * This class creates a dialogue box which allows users to add
 * and remove MU* listings for our MuckConnector.
 * @author jeffnik
 * @version $Id: AddEdit.java,v 1.1 2009/03/29 03:22:06 jeffnik Exp $
 */
public class AddEdit extends javax.swing.JDialog {
    
    /**
     * Creates new form AddEdit
     * @param frameParent The parent frame of this dialogue.
     * @param boxLabel The title for our dialogue box.  The same dialogue
     * is used for both adding new entries and editing
     * existing entries.  Having a specific title will give
     * the user some extra visibility as to what they are
     * doing.
     */
    public AddEdit(java.awt.Frame frameParent, String boxLabel) {
        super(frameParent, "JamochaMUD - " + boxLabel, true);
        
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel1 = new javax.swing.JLabel();
        editName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        editAddy = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        editPort = new javax.swing.JTextField();
        buttonPanel = new javax.swing.JPanel();
        okayButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        secureCB = new javax.swing.JCheckBox();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridBagLayout());

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("anecho/JamochaMUD/JamochaMUDBundle"); // NOI18N
        jLabel1.setText(bundle.getString("MUname")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(7, 7, 3, 3);
        getContentPane().add(jLabel1, gridBagConstraints);

        editName.setColumns(20);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(7, 3, 3, 7);
        getContentPane().add(editName, gridBagConstraints);

        jLabel2.setText(bundle.getString("MUaddress")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 7, 3, 3);
        getContentPane().add(jLabel2, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 7);
        getContentPane().add(editAddy, gridBagConstraints);

        jLabel3.setText(bundle.getString("MUport")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 7, 3, 3);
        getContentPane().add(jLabel3, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 7);
        getContentPane().add(editPort, gridBagConstraints);

        okayButton.setText(bundle.getString("okay")); // NOI18N
        okayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okayButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(okayButton);

        cancelButton.setText(bundle.getString("cancel")); // NOI18N
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(cancelButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 7, 7, 7);
        getContentPane().add(buttonPanel, gridBagConstraints);

        secureCB.setText("Secure connection (SSL)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(secureCB, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okayButtonActionPerformed
        okayStatus = true;
        setVisible(false);
        dispose();

    }//GEN-LAST:event_okayButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        setVisible(false);
        dispose();

    }//GEN-LAST:event_cancelButtonActionPerformed
            
    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog
    
    /**
     * Set all our variables at once *
     * @param name The name of the MU*.
     * @param address The address, either human-readable or numeric, for our MU*
     * @param port The port used to connect to our MU*.
     */
    public void setAll(final String name, final String address, final String port) {
        setName(name);
        setAddress(address);
        setPort(port);
    }
    
    /**
     * Set the name of the MU* to appear in the dialogue
     * @param name The name of the MU* to be displayed.
     */
    public void setName(final String name) {
        editName.setText(name);
    }
    
    /**
     * Set the name of the MU*'s address
     * @param address The address of the MU*, either numeric or human readable.
     */
    public void setAddress(final String address) {
        editAddy.setText(address);
    }
    
    /**
     * Set the port of the MU*
     * @param port The number of the port for the selected MU*
     */
    public void setPort(final String port) {
        editPort.setText(port);
    }
    
    /**
     * Retrieves the human-readable name of the currently displayed MU*.
     * @return A string containing the human-readable name of the MU*
     * currently being edited.
     */
    public String getName() {
        return editName.getText();
    }
    
    /**
     * This method retrieves the numeric or human-readable address of the MU*
     * that is currently being displayed.
     * @return A string representing the number or human-readable MU* address
     */
    public String getAddress() {
        return editAddy.getText();
    }
    
    /**
     * This method retrieves the port number of the currently displayed MU*.
     * @return A string representing the port number of the currently 
     * displayed MU*.
     */
    // public String getPort() {
    public int getPort() {
        // return editPort.getText();
        int retPort = 0;
        try {
            retPort = Integer.parseInt(editPort.getText());
        } catch (Exception exc) {
            if (DEBUG) {
                System.err.println("AddEdit.getPort cannot convert string to integer.");
            }
        }
        
        return retPort;
    }

    /**
     * Set the state for the SSL check-box used by the World.
     * @param ssl <CODE>true</CODE> - this world should use an SSL connection
     * <CODE>false</CODE> - use a plain-text connection to this world
     */
    public void setSSL(final boolean ssl) {
        secureCB.setSelected(ssl);
    }
    
    /**
     * Returns whether the currently displayed world should use an SSL connection.
     * @return <CODE>true</CODE> - this world uses an SSL connection
     * <CODE>false</CODE> - this world uses a plain text connection
     */
    public boolean isSSL() {
        return secureCB.isSelected();
    }
    
    /**
     * Return a true is "Okay" was selected,
     * otherwise return a false
     * @return <CODE>true</CODE> - the user has confirmed the changes made
     * <CODE>false</CODE> - the user wishes to disregard the changes made
     */
    public boolean isOkay() {
        return okayStatus;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JTextField editAddy;
    private javax.swing.JTextField editName;
    private javax.swing.JTextField editPort;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JButton okayButton;
    private javax.swing.JCheckBox secureCB;
    // End of variables declaration//GEN-END:variables
    private transient boolean okayStatus = false;
    private static final boolean DEBUG = false;
}
